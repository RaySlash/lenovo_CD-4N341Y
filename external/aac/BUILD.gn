config("ignore_warnings") {
  if (is_clang) {
    cflags = [
      "-Wno-sequence-point",
      "-Wno-extra",
      "-Wno-#warnings",
      "-Wno-constant-logical-operand",
      "-Wno-self-assign",
      "-Wno-implicit-fallthrough",
      "-Wno-shift-negative-value",
      "-Wno-unused-const-variable",
      "-Wno-unused-function",
    ]
  }
}

static_library("libAACenc") {
  deps = [
    ":libFDK",
    ":libMpegTPEnc",
    ":libSBRenc",
    ":libSYS",
  ]
  configs += [ ":ignore_warnings" ]
  sources = [
    "libAACenc/src/aacEnc_ram.cpp",
    "libAACenc/src/aacEnc_rom.cpp",
    "libAACenc/src/aacenc.cpp",
    "libAACenc/src/aacenc_lib.cpp",
    "libAACenc/src/aacenc_pns.cpp",
    "libAACenc/src/aacenc_tns.cpp",
    "libAACenc/src/adj_thr.cpp",
    "libAACenc/src/band_nrg.cpp",
    "libAACenc/src/bandwidth.cpp",
    "libAACenc/src/bit_cnt.cpp",
    "libAACenc/src/bitenc.cpp",
    "libAACenc/src/block_switch.cpp",
    "libAACenc/src/channel_map.cpp",
    "libAACenc/src/chaosmeasure.cpp",
    "libAACenc/src/dyn_bits.cpp",
    "libAACenc/src/grp_data.cpp",
    "libAACenc/src/intensity.cpp",
    "libAACenc/src/line_pe.cpp",
    "libAACenc/src/metadata_compressor.cpp",
    "libAACenc/src/metadata_main.cpp",
    "libAACenc/src/ms_stereo.cpp",
    "libAACenc/src/noisedet.cpp",
    "libAACenc/src/pnsparam.cpp",
    "libAACenc/src/pre_echo_control.cpp",
    "libAACenc/src/psy_configuration.cpp",
    "libAACenc/src/psy_main.cpp",
    "libAACenc/src/qc_main.cpp",
    "libAACenc/src/quantize.cpp",
    "libAACenc/src/sf_estim.cpp",
    "libAACenc/src/spreading.cpp",
    "libAACenc/src/tonality.cpp",
    "libAACenc/src/transform.cpp",
  ]
  include_dirs = [
    "libAACenc/include",
    "libSYS/include",
    "libFDK/include",
    "libMpegTPEnc/include",
    "libSBRenc/include",
  ]
}

static_library("libSYS") {
  configs += [ ":ignore_warnings" ]
  sources = [
    "libSYS/src/cmdl_parser.cpp",
    "libSYS/src/conv_string.cpp",
    "libSYS/src/genericStds.cpp",
    "libSYS/src/wav_file.cpp",
  ]
  include_dirs = [ "libSYS/include" ]
}

static_library("libFDK") {
  deps = [
    ":libSYS",
  ]
  configs += [ ":ignore_warnings" ]
  sources = [
    "libFDK/src/FDK_bitbuffer.cpp",
    "libFDK/src/FDK_core.cpp",
    "libFDK/src/FDK_crc.cpp",
    "libFDK/src/FDK_hybrid.cpp",
    "libFDK/src/FDK_tools_rom.cpp",
    "libFDK/src/FDK_trigFcts.cpp",
    "libFDK/src/autocorr2nd.cpp",
    "libFDK/src/dct.cpp",
    "libFDK/src/fft.cpp",
    "libFDK/src/fft_rad2.cpp",
    "libFDK/src/fixpoint_math.cpp",
    "libFDK/src/mdct.cpp",
    "libFDK/src/qmf.cpp",
    "libFDK/src/scale.cpp",
  ]
  include_dirs = [
    "libFDK/include",
    "libSYS/include",
  ]
}

static_library("libMpegTPEnc") {
  deps = [
    ":libFDK",
    ":libSYS",
  ]
  configs += [ ":ignore_warnings" ]
  sources = [
    "libMpegTPEnc/src/tpenc_adif.cpp",
    "libMpegTPEnc/src/tpenc_adts.cpp",
    "libMpegTPEnc/src/tpenc_asc.cpp",
    "libMpegTPEnc/src/tpenc_latm.cpp",
    "libMpegTPEnc/src/tpenc_lib.cpp",
  ]
  include_dirs = [
    "libMpegTPEnc/include",
    "libFDK/include",
    "libSYS/include",
  ]
}

static_library("libSBRenc") {
  deps = [
    ":libFDK",
    ":libSYS",
  ]
  configs += [ ":ignore_warnings" ]
  sources = [
    "libSBRenc/src/bit_sbr.cpp",
    "libSBRenc/src/code_env.cpp",
    "libSBRenc/src/env_bit.cpp",
    "libSBRenc/src/env_est.cpp",
    "libSBRenc/src/fram_gen.cpp",
    "libSBRenc/src/invf_est.cpp",
    "libSBRenc/src/mh_det.cpp",
    "libSBRenc/src/nf_est.cpp",
    "libSBRenc/src/ps_bitenc.cpp",
    "libSBRenc/src/ps_encode.cpp",
    "libSBRenc/src/ps_main.cpp",
    "libSBRenc/src/resampler.cpp",
    "libSBRenc/src/sbr_encoder.cpp",
    "libSBRenc/src/sbr_misc.cpp",
    "libSBRenc/src/sbr_ram.cpp",
    "libSBRenc/src/sbr_rom.cpp",
    "libSBRenc/src/sbrenc_freq_sca.cpp",
    "libSBRenc/src/ton_corr.cpp",
    "libSBRenc/src/tran_det.cpp",
  ]
  include_dirs = [
    "libSBRenc/include",
    "libFDK/include",
    "libSYS/include",
  ]
}
